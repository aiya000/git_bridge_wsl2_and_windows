#!/bin/bash

# Environment variables

if [[ -z $GIT_BRIDGE_WSL2_AND_WINDOWS_DEBUG ]] ; then
  GIT_BRIDGE_WSL2_AND_WINDOWS_DEBUG=0
fi

if [[ -z $GIT_BRIDGE_WSL2_AND_WINDOWS_GIT_WSL2 ]] ; then
  GIT_BRIDGE_WSL2_AND_WINDOWS_GIT_WSL2=/usr/bin/git
fi

if [[ -z $GIT_BRIDGE_WSL2_AND_WINDOWS_GIT_WINDOWS ]] ; then
  GIT_BRIDGE_WSL2_AND_WINDOWS_GIT_WINDOWS=git.exe
fi

# Shorten name
git_wsl2=$GIT_BRIDGE_WSL2_AND_WINDOWS_GIT_WSL2
git_windows=$GIT_BRIDGE_WSL2_AND_WINDOWS_GIT_WINDOWS

# Functions

function main () {
  if [[ $GIT_BRIDGE_WSL2_AND_WINDOWS_USE_WSL2 -ne 0 ]]  ; then
    exec_git_wsl2 "$@"
  elif [[ $GIT_BRIDGE_WSL2_AND_WINDOWS_USE_WINDOWS -ne 0 ]] || [[ $(should_use_windows_git) = true ]] ; then
    exec_git_windows "$@"
  else
    # By default
    exec_git_wsl2 "$@"
  fi
}

function exec_git_wsl2 () {
  echo_debug 'Using WSL2 git'
  echo_debug "should_use_windows_git: $(should_use_windows_git)"
  echo_debug "/usr/bin/git $*"

  $git_wsl2 "$@"
}

function exec_git_windows () {
  local args=''

  echo_debug 'Using Windows git'
  echo_debug "should_use_windows_git: $(should_use_windows_git)"
  echo_debug "$git_windows $*"

  for x in "$@"; do
    if [[ $x =~ ^/ ]] ; then
      # TODO: Remove this disabling
      # shellcheck disable=SC2207
      args="$args '$(wslpath -w "$x" | sed -r 's/\\/\\\\/g')'"
      continue
    fi

    args="$args '$x'"
  done

  eval "$git_windows $args"
}

function should_use_windows_git () {
  if \
    [[ $PWD =~ ^/mnt ]] \
    || [[ $PWD =~ ^/home/$USER/Windows ]] \
    || [[ $PWD =~ ^/home/$USER/Desktop ]] ; \
  then
    echo true
  else
    echo false
  fi
}

function echo_debug () {
  if [[ $GIT_BRIDGE_WSL2_AND_WINDOWS_DEBUG -eq 1 ]] ; then
    echo "git_bridge_wsl2_and_windows: $*"
  fi
}

main "$@"
